{"name":"Sushi Smash ","height":"800","isPlatformGame":false,"description":"Smash sushi, dodge junk food, and compete for the high score!","width":"1200","category":"","maxPlayers":20,"usePhysics":true,"defaultStage":"default","useLegacyWorkspaces":false,"createdISO":"2025-04-16T21:25:25.142Z","gameId":"iyIxxiVJASPqGIHVbt6i","creator":"LtVb8CXk7Khbn6pgXrOFDwhxd652","isPublished":true,"publishedPublicVersionAtISO":"2025-05-23T16:29:04.023Z","publishedTestVersion":"3^0","publishedPublicVersion":"3^0","publishedTestVersionAtISO":"2025-05-23T16:29:04.023Z","gameEvents":[{"gameId":"iyIxxiVJASPqGIHVbt6i","name":"addItem","description":"","type":"INPUT","gameEventId":"addItem","uniqueId":"","variables":[{"name":"lastItemIsBad","description":"","defaultValue":false,"type":"BOOLEAN","uniqueId":"","createdISO":"2025-05-23T16:26:05.489Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"Fh5iqZ5XEIExOZkR53E2","gameEventId":"addItem"},{"name":"isPlayer1","description":"","defaultValue":false,"type":"BOOLEAN","uniqueId":"","createdISO":"2025-05-23T16:26:05.489Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"IZTOCvdQMKPnRyoAMetJ","gameEventId":"addItem"},{"name":"playerId","description":"","defaultValue":"","type":"STRING","uniqueId":"","createdISO":"2025-05-23T16:26:05.489Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"xz2Lv9cAKSjIsztPMboJ","gameEventId":"addItem"}],"createdISO":"2025-05-23T16:26:05.236Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","name":"itemClicked","description":"","type":"INPUT","gameEventId":"itemClicked","uniqueId":"","variables":[{"name":"itemId","type":"STRING","description":"","defaultValue":"","uniqueId":"","createdISO":"2025-05-23T16:26:05.439Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"GuyClkX9cGDb75I4EpIj","gameEventId":"itemClicked"},{"name":"playerId","description":"","defaultValue":"","type":"STRING","uniqueId":"","createdISO":"2025-05-23T16:26:05.439Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"HjVh6GezOrJM5n12EVD1","gameEventId":"itemClicked"},{"name":"isPlayer1","description":"","defaultValue":false,"type":"BOOLEAN","uniqueId":"","createdISO":"2025-05-23T16:26:05.439Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"XZVlrrMJClH30dCdixpp","gameEventId":"itemClicked"},{"name":"itemPosition","description":"","defaultValue":0,"type":"NUMBER","uniqueId":"","createdISO":"2025-05-23T16:26:05.439Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"emv9IqjbUIbXlwqT6Euj","gameEventId":"itemClicked"},{"name":"isBad","description":"","defaultValue":false,"type":"BOOLEAN","uniqueId":"","createdISO":"2025-05-23T16:26:05.440Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"oIbOHTRgiKoaJ2sLnhy8","gameEventId":"itemClicked"}],"createdISO":"2025-05-23T16:26:05.238Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","name":"removeItem","description":"","type":"INPUT","gameEventId":"removeItem","uniqueId":"","variables":[{"name":"itemId","type":"STRING","description":"","defaultValue":"","uniqueId":"","createdISO":"2025-05-23T16:26:05.431Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"96JgfBbYXB3T9p2BS6zE","gameEventId":"removeItem"},{"name":"itemPosition","type":"NUMBER","description":"","defaultValue":0,"uniqueId":"","createdISO":"2025-05-23T16:26:05.432Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"S7PlqZebDlEwAMpVHdrx","gameEventId":"removeItem"}],"createdISO":"2025-05-23T16:26:05.238Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","name":"startGame","description":"","type":"INPUT","gameEventId":"startGame","uniqueId":"","variables":[{"name":"theme","type":"STRING","description":"","defaultValue":"moles","uniqueId":"","createdISO":"2025-05-23T16:26:05.426Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"YvnZoM0IiEuIQsEUKZVx","gameEventId":"startGame"}],"createdISO":"2025-05-23T16:26:05.239Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","name":"updateItemTimer","description":"","type":"INPUT","gameEventId":"updateItemTimer","uniqueId":"","variables":[{"name":"timer","type":"NUMBER","description":"","defaultValue":0,"uniqueId":"","createdISO":"2025-05-23T16:26:05.434Z","gameId":"iyIxxiVJASPqGIHVbt6i","variableId":"7oElVDDiqylVXP1daEcD","gameEventId":"updateItemTimer"}],"createdISO":"2025-05-23T16:26:05.239Z"}],"sprites":[{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/leaderboard.png","bottomUrl":""},"spriteId":"leaderboard","textOptions":null,"name":"leaderboard","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.239Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/mole1.png","bottomUrl":""},"spriteId":"mole1","textOptions":null,"name":"mole1","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.239Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/mole2.png","bottomUrl":""},"spriteId":"mole2","textOptions":null,"name":"mole2","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.240Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/mole3.png","bottomUrl":""},"spriteId":"mole3","textOptions":null,"name":"mole3","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.240Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":null,"spriteId":"playButton","textOptions":{"fontFamily":"Arial","color":"#000000","size":24,"topAdjust":0,"width":600,"weight":"normal","displayLayer":"BOTTOM"},"name":"playButton","ellipseOptions":null,"type":"TEXT","uniqueId":"","createdISO":"2025-05-23T16:26:05.240Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi1.png","bottomUrl":""},"spriteId":"sushi1","textOptions":null,"name":"sushi1","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.240Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi10.png","bottomUrl":""},"spriteId":"sushi10","textOptions":null,"name":"sushi10","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.241Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi11.png","bottomUrl":""},"spriteId":"sushi11","textOptions":null,"name":"sushi11","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.241Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi12.png","bottomUrl":""},"spriteId":"sushi12","textOptions":null,"name":"sushi12","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.241Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi13.png","bottomUrl":""},"spriteId":"sushi13","textOptions":null,"name":"sushi13","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.241Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi2.png","bottomUrl":""},"spriteId":"sushi2","textOptions":null,"name":"sushi2","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.241Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi3.png","bottomUrl":""},"spriteId":"sushi3","textOptions":null,"name":"sushi3","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.241Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi4.png","bottomUrl":""},"spriteId":"sushi4","textOptions":null,"name":"sushi4","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.242Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi5.png","bottomUrl":""},"spriteId":"sushi5","textOptions":null,"name":"sushi5","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.242Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi6.png","bottomUrl":""},"spriteId":"sushi6","textOptions":null,"name":"sushi6","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.242Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi7.png","bottomUrl":""},"spriteId":"sushi7","textOptions":null,"name":"sushi7","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.242Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi8.png","bottomUrl":""},"spriteId":"sushi8","textOptions":null,"name":"sushi8","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.242Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":{"topAdjust":0,"topUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushi9.png","bottomUrl":""},"spriteId":"sushi9","textOptions":null,"name":"sushi9","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","createdISO":"2025-05-23T16:26:05.243Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"spriteId":"sushiLayer1","textOptions":null,"name":"sushiLayer1","ellipseOptions":null,"type":"WEB_IMAGE","uniqueId":"","webImageOptions":{"topAdjust":0,"bottomAdjust":"BRING_TO_FRONT","topUrl":"","bottomUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushiLayer1.png"},"createdISO":"2025-05-23T16:26:05.243Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","variables":[],"spriteWorkspaceString":null,"rectOptions":null,"webImageOptions":null,"spriteId":"text","textOptions":{"fontFamily":"Arial","color":"#000000","size":24,"topAdjust":0,"width":600,"weight":"normal","displayLayer":"BOTTOM"},"name":"text","ellipseOptions":null,"type":"TEXT","uniqueId":"","createdISO":"2025-05-23T16:26:05.243Z"}],"variables":[{"gameId":"iyIxxiVJASPqGIHVbt6i","defaultValue":0,"scope":"SERVER","name":"gameTimer","description":"","type":"NUMBER","variableId":"gameTimer","uniqueId":"","createdISO":"2025-05-23T16:26:05.235Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","defaultValue":"","scope":"CONFIGURATION","name":"interactivePublicKey","description":"","type":"STRING","variableId":"interactivePublicKey","uniqueId":"","createdISO":"2025-05-23T16:26:05.235Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","defaultValue":"","scope":"CONFIGURATION","name":"particleId","description":"","type":"STRING","variableId":"particleId","uniqueId":"","createdISO":"2025-05-23T16:26:05.235Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","scope":"SERVER","name":"playerQueue","description":"","type":"ARRAY","variableId":"playerQueue","uniqueId":"","createdISO":"2025-05-23T16:26:05.235Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","defaultValue":"","scope":"SERVER","name":"serverVariable","description":"testing on chagned","type":"STRING","variableId":"serverVariable","createdISO":"2025-05-23T16:26:05.235Z","uniqueId":""},{"gameId":"iyIxxiVJASPqGIHVbt6i","defaultValue":"sushi","scope":"SERVER","name":"theme","description":"","type":"STRING","variableId":"theme","uniqueId":"","createdISO":"2025-05-23T16:26:05.236Z"}],"stages":[{"gameId":"iyIxxiVJASPqGIHVbt6i","webImageOptions":{"topUrl":"","bottomUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/defaultStage.png"},"name":"default","description":"","type":"WEB_IMAGE","uniqueId":"","stageId":"default","createdISO":"2025-05-23T16:26:05.236Z"},{"gameId":"iyIxxiVJASPqGIHVbt6i","webImageOptions":{"topUrl":"","bottomUrl":"https://sdk-whack-a-mole.s3.us-east-1.amazonaws.com/sushiLayer0.png"},"name":"sushi","description":"","type":"WEB_IMAGE","uniqueId":"","stageId":"sushi","createdISO":"2025-05-23T16:26:05.236Z"}],"scripts":[{"gameId":"iyIxxiVJASPqGIHVbt6i","methodSignatures":[{"parameters":[],"methodName":"onInit","returnType":"void"},{"parameters":[],"methodName":"onSpriteCollisionStart","returnType":"void"}],"scriptType":"component","scriptName":"boardManager","className":"boardManager","contentUpdatedAtISO":"2025-03-31T21:31:50.146Z","includedAPIs":[],"gameScriptId":"boardManager","propertySignatures":[],"scriptFormat":"ts","createdISO":"2025-05-23T16:26:05.243Z","typescriptString":"class boardManager extends ComponentScript {\n\n  constructor(){};\n  \n  onInit(){};\n\n  onSpriteCollisionStart(){\n    // const ids = [playerManager.getMyPlayerId()]\n    // console.log(\"onSpriteCollisionStart ids\",ids)\n    // playerManager.teleportPlayers(ids, {\n    //   distributionType: 'area',\n    //   positionX: 100,\n    //   positionY: 20,\n    //   height: 50,\n    //   width: 50,\n    // });\n  }\n};\n","javascriptString":"\"use strict\";\nvar pseudoProxy = scriptManager._getPsuedoProxy({ scriptInstanceId: scriptInstanceId });\nfunction boardManager() {\n}\nboardManager.prototype.onInit = function () {\n};\nboardManager.prototype.onSpriteCollisionStart = function () {\n};\n;\n"},{"gameId":"iyIxxiVJASPqGIHVbt6i","methodSignatures":[{"parameters":[],"methodName":"onClicked","returnType":"void"}],"scriptType":"system","scriptName":"buttonManager","className":"buttonManager","contentUpdatedAtISO":"2025-03-31T21:31:50.148Z","includedAPIs":["spriteManager","eventManager"],"gameScriptId":"buttonManager","propertySignatures":[],"scriptFormat":"ts","createdISO":"2025-05-23T16:26:05.247Z","typescriptString":"class buttonManager extends ComponentScript {\n  onClicked() {\n    const theme = this.sprite.uniqueId;\n    const main = scriptManager\n      .getSystem({ systemName: 'main' })\n      .startGame({ theme });\n  }\n}","javascriptString":"\"use strict\";\nvar pseudoProxy = scriptManager._getPsuedoProxy({ scriptInstanceId: scriptInstanceId });\nfunction buttonManager() {\n}\nbuttonManager.prototype.onClicked = function () {\n    var theme = pseudoProxy.sprite.uniqueId;\n    var main = scriptManager\n        .getSystem({ _rs: _rs, _rsId: _rsId, as: false }, { systemName: 'main' })\n        .startGame({ theme: theme });\n};\n"},{"gameId":"iyIxxiVJASPqGIHVbt6i","methodSignatures":[{"parameters":[],"methodName":"onInit","returnType":"void"},{"isAsync":true,"methodName":"onPlayerJoined","parameters":[{"label":"__0","type":"{ playerId: any; }"}],"returnType":"Promise<void>"},{"isAsync":true,"methodName":"onPlayerLeft","parameters":[{"label":"__0","type":"{ playerId: any; }"}],"returnType":"Promise<void>"},{"isAsync":true,"methodName":"removeFromQueue","parameters":[{"label":"__0","type":"{ playerId: number; shouldMoveToBottom?: boolean; }"}],"returnType":"Promise<void>"},{"parameters":[],"isAsync":true,"methodName":"onStep","returnType":"Promise<void>"},{"parameters":[],"isAsync":true,"methodName":"startGame","returnType":"Promise<void>"},{"parameters":[],"isAsync":true,"methodName":"endGame","returnType":"Promise<void>"},{"parameters":[],"isAsync":true,"methodName":"prepForNextGame","returnType":"Promise<void>"},{"parameters":[],"methodName":"resetGame","returnType":"void"},{"isAsync":true,"methodName":"addItem","parameters":[{"label":"__0","type":"{ isPlayer1: boolean; playerId: number; lastItemIsBad?: boolean; }"}],"returnType":"Promise<void>"},{"isAsync":true,"methodName":"removeItem","parameters":[{"label":"__0","type":"{ itemId: string; itemPosition: number; isPlayer1: boolean; playerId: number; }"}],"returnType":"Promise<void>"},{"isAsync":true,"methodName":"itemClicked","parameters":[{"label":"__0","type":"{ itemId: string; isBad: boolean; isPlayer1: boolean; playerId: number; itemPosition: number; }"}],"returnType":"Promise<void>"}],"scriptType":"system","scriptName":"gameManager","className":"gameManager","contentUpdatedAtISO":"2025-04-14T18:10:27.556Z","includedAPIs":[],"gameScriptId":"gameManager","propertySignatures":[{"propertyName":"theme","type":"string"},{"propertyName":"player1_id","type":"number"},{"propertyName":"player2_id","type":"number"},{"propertyName":"player1_profileId","type":"string"},{"propertyName":"player2_profileId","type":"string"},{"propertyName":"player1_score","type":"number"},{"propertyName":"player2_score","type":"number"},{"genericArgs":["any"],"propertyName":"player1_occupiedPositions","type":"PseudoMap<any>"},{"genericArgs":["any"],"propertyName":"player2_occupiedPositions","type":"PseudoMap<any>"},{"propertyName":"isGameInProress","type":"boolean"},{"propertyName":"isEndGameRunning","type":"boolean"},{"propertyName":"interactivePublicKey","type":"string"},{"propertyName":"endGameTimer","type":"number"},{"propertyName":"nextGameTimer","type":"number"},{"propertyName":"isNextGamePreped","type":"boolean"}],"scriptFormat":"ts","createdISO":"2025-05-23T16:26:05.249Z","typescriptString":"class gameManager extends SystemScript {\n  theme: string;\n  player1_id: number;\n  player2_id: number;\n  player1_profileId: string;\n  player2_profileId: string;\n  player1_score: number;\n  player2_score: number;\n  player1_occupiedPositions: PseudoMap;\n  player2_occupiedPositions: PseudoMap;\n  isGameInProress: boolean;\n  isEndGameRunning: boolean;\n  interactivePublicKey: string;\n  endGameTimer: number;\n  nextGameTimer: number;\n  isNextGamePreped: boolean;\n\n  constructor() {\n    this.player1_occupiedPositions = {};\n    this.player2_occupiedPositions = {};\n    this.theme = 'sushi';\n    this.isEndGameRunning = false;\n    this.endGameTimer = 10;\n    this.isNextGamePreped = false;\n    this.interactivePublicKey = stateManager.getVariable(\n      'interactivePublicKey',\n    );\n\n    scriptManager.attachSystem({ scriptId: 'utils_getPosition' });\n  }\n\n  onInit() {\n    this.resetGame();\n  }\n\n  // // *** Queue\n  async onPlayerJoined({ playerId }) {\n    const profileId = playerManager.getPlayerDetails(playerId)?.profileId;\n\n    integrationsManager.putPublicKeyAnalytics({\n      interactivePublicKey: this.interactivePublicKey,\n      analytics: [\n        {\n          analyticName: `joins`,\n          profileId,\n          uniqueKey: profileId,\n        },\n      ],\n    });\n\n    if (!this.player1_id) {\n      this.player1_id = playerId;\n      this.player1_profileId = profileId;\n      return;\n    }\n\n    let playerQueue = stateManager.getVariable('playerQueue');\n    if (playerQueue.indexOf(playerId) === -1) playerQueue.push(playerId);\n\n    if (this.player2_id && playerQueue.indexOf(this.player2_id) !== -1) {\n      // move player 2 to end of queue\n      playerQueue = playerQueue.filter((num) => num !== this.player2_id);\n      playerQueue.push(this.player2_id);\n    }\n\n    stateManager.setVariable('playerQueue', playerQueue);\n\n    if (!this.player2_id && !this.isGameInProress) this.prepForNextGame();\n\n    if (playerQueue.length > 1) {\n      integrationsManager.putPublicKeyAnalytics({\n        interactivePublicKey: this.interactivePublicKey,\n        analytics: [\n          {\n            analyticName: `addedToQueue`,\n            profileId,\n            uniqueKey: profileId,\n          },\n        ],\n      });\n    }\n  }\n\n  async onPlayerLeft({ playerId }) {\n    await this.removeFromQueue({ playerId });\n  }\n\n  async removeFromQueue({\n    playerId,\n    shouldMoveToBottom = false,\n  }: {\n    playerId: number;\n    shouldMoveToBottom?: boolean;\n  }) {\n    let playerQueue = stateManager.getVariable('playerQueue');\n    playerQueue = playerQueue.filter((num) => num !== playerId);\n    if (shouldMoveToBottom && playerQueue.indexOf(playerId) === -1) {\n      playerQueue.push(playerId);\n    }\n    stateManager.setVariable('playerQueue', playerQueue);\n  }\n\n  // *** Timer\n  async onStep() {\n    if (!playerManager.isHost) return;\n\n    const gameTimer = stateManager.getVariable('gameTimer');\n\n    const {\n      isGameInProress,\n      nextGameTimer,\n      endGameTimer,\n      isNextGamePreped,\n      player1_id,\n      player2_id,\n    } = this;\n\n    if (!isGameInProress) {\n      if (endGameTimer > 0) {\n        this.endGameTimer = endGameTimer - 1;\n      } else if (endGameTimer === 0 && !isNextGamePreped) {\n        this.prepForNextGame();\n      } else if (nextGameTimer === 0) {\n        this.startGame();\n      } else {\n        spriteManager.updateSprite('timer', {\n          text: `Next game starts in ${nextGameTimer}`,\n        });\n        this.nextGameTimer = nextGameTimer - 1;\n      }\n    } else if (gameTimer === 0) {\n      this.endGame();\n    } else {\n      // if (gameTimer === 40 || gameTimer === 20) {\n      //   await this.addItem({ isPlayer1: true, playerId: this.player1_id });\n      //   if (this.player2_id) {\n      //     await this.addItem({ isPlayer1: false, playerId: this.player2_id });\n      //   }\n      // }\n      spriteManager.updateSprite('timer', {\n        text: `Time Remaining: ${gameTimer}`,\n      });\n      stateManager.setVariable('gameTimer', gameTimer - 1);\n    }\n  }\n\n  // *** Game State\n  async startGame() {\n    this.resetGame();\n\n    // only moving players and not spectators\n    // let playerIds = playerManager.getPlayerIds();\n    // playerIds = playerIds.filter(\n    //   (number) => number !== this.player1_id && number !== this.player2_id,\n    // );\n    // console.log(\"playerIds\",playerIds)\n    // playerManager.teleportPlayers(playerIds, {\n    //   distributionType: 'area',\n    //   positionX: 100,\n    //   positionY: 20,\n    //   height: 50,\n    //   width: 50,\n    // });\n\n    stateManager.setVariable('gameTimer', 40);\n\n    let playerQueue = stateManager.getVariable('playerQueue');\n\n    if (playerQueue.length > 0) {\n      integrationsManager.putPublicKeyAnalytics({\n        interactivePublicKey: this.interactivePublicKey,\n        analytics: [{ analyticName: `gamesWith2Players` }],\n      });\n    } else {\n      integrationsManager.putPublicKeyAnalytics({\n        interactivePublicKey: this.interactivePublicKey,\n        analytics: [{ analyticName: `gamesWith1Player` }],\n      });\n    }\n\n    this.isGameInProress = true;\n\n    playerManager.teleportPlayers([this.player1_id], {\n      distributionType: 'radius',\n      positionX: 570,\n      positionY: 410,\n      radius: 10,\n      height: 10,\n      width: 10,\n    });\n    await this.addItem({ isPlayer1: true, playerId: this.player1_id });\n\n    integrationsManager.putPublicKeyAnalytics({\n      interactivePublicKey: this.interactivePublicKey,\n      analytics: [\n        {\n          analyticName: `starts`,\n          profileId: `${this.player1_profileId}`,\n          uniqueKey: `${this.player1_profileId}`,\n        },\n      ],\n    });\n\n    if (this.player2_id) {\n      playerManager.teleportPlayers([this.player2_id], {\n        distributionType: 'radius',\n        positionX: 620,\n        positionY: 560,\n        radius: 10,\n        height: 10,\n        width: 10,\n      });\n      await this.addItem({ isPlayer1: false, playerId: this.player2_id });\n\n      integrationsManager.putPublicKeyAnalytics({\n        interactivePublicKey: this.interactivePublicKey,\n        analytics: [\n          {\n            analyticName: `starts`,\n            profileId: `${this.player2_profileId}`,\n            uniqueKey: `${this.player2_profileId}`,\n          },\n        ],\n      });\n    }\n  }\n\n  async endGame() {\n    if (this.isEndGameRunning) return;\n\n    this.isEndGameRunning = true;\n    this.isGameInProress = false;\n    this.endGameTimer = 5;\n\n    spriteManager.updateSprite('timer', { text: `Time Remaining: 0` });\n\n    let text = 'Good game!';\n    let winnerId;\n\n    const player1 = playerManager.getPlayerDetails(this.player1_id);\n    const p1profileId = player1.profileId;\n    let dataObject = integrationsManager.getDataObject({\n      interactivePublicKey: this.interactivePublicKey,\n      scope: 'WORLD',\n    });\n\n    if (!dataObject.profiles) {\n      dataObject = {\n        profiles: {\n          [p1profileId]: {\n            highScore: this.player1_score,\n            username: player1.nameplate || player1.username,\n          },\n        },\n      };\n    } else if (\n      !dataObject.profiles[p1profileId] ||\n      dataObject.profiles[p1profileId].highScore < this.player1_score\n    ) {\n      dataObject.profiles[p1profileId] = {\n        highScore: this.player1_score,\n        username: player1.nameplate || player1.username,\n      };\n    }\n\n    if (this.player2_id) {\n      const player2 = playerManager.getPlayerDetails(this.player2_id);\n      const p2profileId = player2.profileId;\n      if (\n        !dataObject.profiles[p2profileId] ||\n        dataObject.profiles[p2profileId].highScore < this.player2_score\n      ) {\n        dataObject.profiles[p2profileId] = {\n          highScore: this.player2_score,\n          username: player2.nameplate || player2.username,\n        };\n      }\n\n      if (this.player2_score == this.player1_score) {\n        text = \"It's a tie!\";\n      } else if (this.player2_score > this.player1_score) {\n        winnerId = this.player2_id;\n      } else {\n        winnerId = this.player1_id;\n      }\n\n      if (winnerId) {\n        text = `${playerManager.getPlayerDetails(winnerId).nameplate} wins!`;\n        integrationsManager.triggerParticleEffect({\n          interactivePublicKey: this.interactivePublicKey,\n          duration: 4,\n          playerId: winnerId,\n          followPlayerId: winnerId,\n          particleId: stateManager.getVariable('particleId'),\n        });\n      }\n\n      integrationsManager.putPublicKeyAnalytics({\n        interactivePublicKey: this.interactivePublicKey,\n        analytics: [\n          {\n            analyticName: `completions`,\n            profileId: `${this.player2_profileId}`,\n            uniqueKey: `${this.player2_profileId}`,\n          },\n          {\n            analyticName: `scoreOf${this.player2_score}`,\n          },\n        ],\n      });\n    }\n\n    spriteManager.updateSprite('gameText', { text });\n\n    integrationsManager.putPublicKeyAnalytics({\n      interactivePublicKey: this.interactivePublicKey,\n      analytics: [\n        {\n          analyticName: `completions`,\n          profileId: `${this.player1_profileId}`,\n          uniqueKey: `${this.player1_profileId}`,\n        },\n        { analyticName: `scoreOf${this.player1_score}` },\n      ],\n    });\n\n    integrationsManager.updateDataObject({\n      interactivePublicKey: this.interactivePublicKey,\n      scope: 'WORLD',\n      payload: dataObject,\n    });\n\n    this.isNextGamePreped = false;\n    this.isEndGameRunning = false;\n  }\n\n  async prepForNextGame() {\n    // 5 seconds before next game counter starts or when 2nd player joins\n\n    if (this.player2_id) {\n      spriteManager.updateSprite('player2_name', {\n        text: ' ',\n      });\n    }\n\n    let playerQueue = stateManager.getVariable('playerQueue');\n\n    if (playerQueue.length > 0) {\n      const playerIds = playerManager.getPlayerIds();\n\n      playerQueue.forEach((id, index) => {\n        if (playerIds.indexOf(id) === -1) {\n          playerQueue.splice(index, 1);\n        }\n      });\n\n      this.player2_id = playerQueue[0];\n      this.player2_profileId = playerManager.getPlayerDetails(\n        playerQueue[0],\n      )?.profileId;\n\n      spriteManager.updateSprite('player2_name', {\n        text: `${playerManager.getPlayerDetails(this.player2_id).nameplate}`,\n      });\n    }\n    if (playerQueue.length > 1) {\n      await this.removeFromQueue({\n        playerId: playerQueue[0],\n        shouldMoveToBottom: true,\n      });\n    }\n\n    spriteManager.updateSprite('gameText', {\n      text: ' ',\n    });\n\n    spriteManager.updateSprite('player1_score', {\n      text: `Score: 0`,\n    });\n\n    if (this.player2_id) {\n      spriteManager.updateSprite('player2_score', {\n        text: `Score: 0`,\n      });\n    }\n\n    stateManager.setVariable('gameTimer', 5);\n    this.endGameTimer = 0;\n    this.nextGameTimer = 5;\n    this.isNextGamePreped = true;\n  }\n\n  resetGame() {\n    this.player1_score = 0;\n    this.player2_score = 0;\n    this.isGameInProress = false;\n    this.player1_occupiedPositions = {\n      1: false,\n      2: false,\n      3: false,\n      4: false,\n      5: false,\n      6: false,\n      7: false,\n      8: false,\n      9: false,\n    };\n    this.player2_occupiedPositions = {\n      1: false,\n      2: false,\n      3: false,\n      4: false,\n      5: false,\n      6: false,\n      7: false,\n      8: false,\n      9: false,\n    };\n  }\n\n  // *** Items\n  async addItem({\n    isPlayer1,\n    playerId,\n    lastItemIsBad,\n  }: {\n    isPlayer1: boolean;\n    playerId: number;\n    lastItemIsBad?: boolean;\n  }) {\n    const gameTimer = stateManager.getVariable('gameTimer');\n\n    if (!this.isGameInProress || gameTimer === 0) return;\n\n    const occupiedPositions = isPlayer1\n      ? this.player1_occupiedPositions.toObject()\n      : this.player2_occupiedPositions.toObject();\n\n    let count = 0;\n    for (var key in occupiedPositions) {\n      if (occupiedPositions[key] === true) count = count + 1;\n    }\n    if (count > 3) return;\n\n    const spriteId = mathRandomInt(1, lastItemIsBad ? 8 : 12);\n    const uniqueId = getRandomUUID();\n\n    const { position, x, y } = scriptManager\n      .getSystem({ systemName: 'utils_getPosition' })\n      .getPosition({ isPlayer1, occupiedPositions });\n\n    spriteManager.addSprite(`${this.theme}${spriteId}`, {\n      uniqueId,\n      applyPhysics: true,\n      isInteractive: true,\n      positionX: x,\n      positionY: y,\n    });\n    scriptManager.attachComponent({\n      objectUniqueId: uniqueId,\n      componentName: 'itemManager',\n      scriptId: 'itemManager',\n    });\n\n    const item = scriptManager.getComponent({\n      objectUniqueId: uniqueId,\n      componentName: 'itemManager',\n    });\n    item.playerId = playerId;\n    item.itemPosition = position;\n    item.isBad = spriteId > 8 ? true : false;\n    item.isPlayer1 = isPlayer1;\n\n    occupiedPositions[position] = true;\n    if (isPlayer1) {\n      this.player1_occupiedPositions = occupiedPositions;\n      // this.player1_occupiedPositions[position] = true;\n    } else {\n      this.player2_occupiedPositions = occupiedPositions;\n      // this.player2_occupiedPositions[position] = true;\n    }\n  }\n\n  async removeItem({\n    itemId,\n    itemPosition,\n    isPlayer1,\n    playerId,\n  }: {\n    itemId: string;\n    itemPosition: number;\n    isPlayer1: boolean;\n    playerId: number;\n  }) {\n    spriteManager.removeSprite(itemId);\n\n    const occupiedPositions = isPlayer1\n      ? this.player1_occupiedPositions.toObject()\n      : this.player2_occupiedPositions.toObject();\n    occupiedPositions[itemPosition] = false;\n    if (isPlayer1) {\n      this.player1_occupiedPositions = occupiedPositions;\n      // this.player1_occupiedPositions[itemPosition] = false;\n    } else {\n      this.player2_occupiedPositions = occupiedPositions;\n      // this.player2_occupiedPositions[itemPosition] = false;\n    }\n\n    let count = 0;\n    for (var key in occupiedPositions) {\n      if (occupiedPositions[key] === true) count = count + 1;\n    }\n    if (count === 0) await this.addItem({ isPlayer1, playerId });\n  }\n\n  async itemClicked({\n    itemId,\n    isBad,\n    isPlayer1,\n    playerId,\n    itemPosition,\n  }: {\n    itemId: string;\n    isBad: boolean;\n    isPlayer1: boolean;\n    playerId: number;\n    itemPosition: number;\n  }) {\n    if (isPlayer1) {\n      if (isBad) this.player1_score = this.player1_score - 1;\n      else this.player1_score++;\n      spriteManager.updateSprite('player1_score', {\n        text: `Score: ${this.player1_score}`,\n      });\n    } else {\n      if (isBad) this.player2_score = this.player2_score - 1;\n      else this.player2_score++;\n      spriteManager.updateSprite('player2_score', {\n        text: `Score: ${this.player2_score}`,\n      });\n    }\n\n    await this.removeItem({ itemId, itemPosition, isPlayer1, playerId });\n\n    await this.addItem({ isPlayer1, playerId, lastItemIsBad: isBad });\n  }\n}","javascriptString":"\"use strict\";\nvar pseudoProxy = scriptManager._getPsuedoProxy({ scriptInstanceId: scriptInstanceId });\nfunction gameManager() {\n    pseudoProxy.player1_occupiedPositions = {};\n    pseudoProxy.player2_occupiedPositions = {};\n    pseudoProxy.theme = 'sushi';\n    pseudoProxy.isEndGameRunning = false;\n    pseudoProxy.endGameTimer = 10;\n    pseudoProxy.isNextGamePreped = false;\n    pseudoProxy.interactivePublicKey = stateManager.getVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'interactivePublicKey');\n    scriptManager.attachSystem({ _rs: _rs, _rsId: _rsId, as: false }, { scriptId: 'utils_getPosition' });\n}\ngameManager.prototype.onInit = function () {\n    pseudoProxy.resetGame({ _rs: _rs, _rsId: _rsId, as: false });\n};\ngameManager.prototype.onPlayerJoined = function (_a) {\n    var _b;\n    var playerId = _a.playerId;\n    var profileId = (_b = playerManager.getPlayerDetails({ _rs: _rs, _rsId: _rsId, as: false }, playerId)) === null || _b === void 0 ? void 0 : _b.profileId;\n    integrationsManager.putPublicKeyAnalytics({ _rs: _rs, _rsId: _rsId, as: false }, {\n        interactivePublicKey: pseudoProxy.interactivePublicKey,\n        analytics: [\n            {\n                analyticName: \"joins\",\n                profileId: profileId,\n                uniqueKey: profileId,\n            },\n        ],\n    });\n    if (!pseudoProxy.player1_id) {\n        pseudoProxy.player1_id = playerId;\n        pseudoProxy.player1_profileId = profileId;\n        return;\n    }\n    var playerQueue = stateManager.getVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'playerQueue');\n    if (playerQueue.indexOf(playerId) === -1)\n        playerQueue.push(playerId);\n    if (pseudoProxy.player2_id && playerQueue.indexOf(pseudoProxy.player2_id) !== -1) {\n        // move player 2 to end of queue\n        playerQueue = playerQueue.filter(function (num) { return num !== pseudoProxy.player2_id; });\n        playerQueue.push(pseudoProxy.player2_id);\n    }\n    stateManager.setVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'playerQueue', playerQueue);\n    if (!pseudoProxy.player2_id && !pseudoProxy.isGameInProress)\n        pseudoProxy.prepForNextGame({ _rs: _rs, _rsId: _rsId, as: false });\n    if (playerQueue.length > 1) {\n        integrationsManager.putPublicKeyAnalytics({ _rs: _rs, _rsId: _rsId, as: false }, {\n            interactivePublicKey: pseudoProxy.interactivePublicKey,\n            analytics: [\n                {\n                    analyticName: \"addedToQueue\",\n                    profileId: profileId,\n                    uniqueKey: profileId,\n                },\n            ],\n        });\n    }\n};\ngameManager.prototype.onPlayerLeft = function (_a) {\n    var playerId = _a.playerId;\n    pseudoProxy.removeFromQueue({ _rs: _rs, _rsId: _rsId, as: true }, { playerId: playerId });\n};\ngameManager.prototype.removeFromQueue = function (_a) {\n    var playerId = _a.playerId, _b = _a.shouldMoveToBottom, shouldMoveToBottom = _b === void 0 ? false : _b;\n    var playerQueue = stateManager.getVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'playerQueue');\n    playerQueue = playerQueue.filter(function (num) { return num !== playerId; });\n    if (shouldMoveToBottom && playerQueue.indexOf(playerId) === -1) {\n        playerQueue.push(playerId);\n    }\n    stateManager.setVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'playerQueue', playerQueue);\n};\ngameManager.prototype.onStep = function () {\n    if (!playerManager.isHost)\n        return;\n    var gameTimer = stateManager.getVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'gameTimer');\n    var isGameInProress = pseudoProxy.isGameInProress, nextGameTimer = pseudoProxy.nextGameTimer, endGameTimer = pseudoProxy.endGameTimer, isNextGamePreped = pseudoProxy.isNextGamePreped, player1_id = pseudoProxy.player1_id, player2_id = pseudoProxy.player2_id;\n    if (!isGameInProress) {\n        if (endGameTimer > 0) {\n            pseudoProxy.endGameTimer = endGameTimer - 1;\n        }\n        else if (endGameTimer === 0 && !isNextGamePreped) {\n            pseudoProxy.prepForNextGame({ _rs: _rs, _rsId: _rsId, as: false });\n        }\n        else if (nextGameTimer === 0) {\n            pseudoProxy.startGame({ _rs: _rs, _rsId: _rsId, as: false });\n        }\n        else {\n            spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'timer', {\n                text: \"Next game starts in \".concat(nextGameTimer),\n            });\n            pseudoProxy.nextGameTimer = nextGameTimer - 1;\n        }\n    }\n    else if (gameTimer === 0) {\n        pseudoProxy.endGame({ _rs: _rs, _rsId: _rsId, as: false });\n    }\n    else {\n        // if (gameTimer === 40 || gameTimer === 20) {\n        //   await this.addItem({ isPlayer1: true, playerId: this.player1_id });\n        //   if (this.player2_id) {\n        //     await this.addItem({ isPlayer1: false, playerId: this.player2_id });\n        //   }\n        // }\n        spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'timer', {\n            text: \"Time Remaining: \".concat(gameTimer),\n        });\n        stateManager.setVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'gameTimer', gameTimer - 1);\n    }\n};\ngameManager.prototype.startGame = function () {\n    pseudoProxy.resetGame({ _rs: _rs, _rsId: _rsId, as: false });\n    // only moving players and not spectators\n    // let playerIds = playerManager.getPlayerIds();\n    // playerIds = playerIds.filter(\n    //   (number) => number !== this.player1_id && number !== this.player2_id,\n    // );\n    // console.log(\"playerIds\",playerIds)\n    // playerManager.teleportPlayers(playerIds, {\n    //   distributionType: 'area',\n    //   positionX: 100,\n    //   positionY: 20,\n    //   height: 50,\n    //   width: 50,\n    // });\n    stateManager.setVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'gameTimer', 40);\n    var playerQueue = stateManager.getVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'playerQueue');\n    if (playerQueue.length > 0) {\n        integrationsManager.putPublicKeyAnalytics({ _rs: _rs, _rsId: _rsId, as: false }, {\n            interactivePublicKey: pseudoProxy.interactivePublicKey,\n            analytics: [{ analyticName: \"gamesWith2Players\" }],\n        });\n    }\n    else {\n        integrationsManager.putPublicKeyAnalytics({ _rs: _rs, _rsId: _rsId, as: false }, {\n            interactivePublicKey: pseudoProxy.interactivePublicKey,\n            analytics: [{ analyticName: \"gamesWith1Player\" }],\n        });\n    }\n    pseudoProxy.isGameInProress = true;\n    playerManager.teleportPlayers({ _rs: _rs, _rsId: _rsId, as: false }, [pseudoProxy.player1_id], {\n        distributionType: 'radius',\n        positionX: 570,\n        positionY: 410,\n        radius: 10,\n        height: 10,\n        width: 10,\n    });\n    pseudoProxy.addItem({ _rs: _rs, _rsId: _rsId, as: true }, { isPlayer1: true, playerId: pseudoProxy.player1_id });\n    integrationsManager.putPublicKeyAnalytics({ _rs: _rs, _rsId: _rsId, as: false }, {\n        interactivePublicKey: pseudoProxy.interactivePublicKey,\n        analytics: [\n            {\n                analyticName: \"starts\",\n                profileId: \"\".concat(pseudoProxy.player1_profileId),\n                uniqueKey: \"\".concat(pseudoProxy.player1_profileId),\n            },\n        ],\n    });\n    if (pseudoProxy.player2_id) {\n        playerManager.teleportPlayers({ _rs: _rs, _rsId: _rsId, as: false }, [pseudoProxy.player2_id], {\n            distributionType: 'radius',\n            positionX: 620,\n            positionY: 560,\n            radius: 10,\n            height: 10,\n            width: 10,\n        });\n        pseudoProxy.addItem({ _rs: _rs, _rsId: _rsId, as: true }, { isPlayer1: false, playerId: pseudoProxy.player2_id });\n        integrationsManager.putPublicKeyAnalytics({ _rs: _rs, _rsId: _rsId, as: false }, {\n            interactivePublicKey: pseudoProxy.interactivePublicKey,\n            analytics: [\n                {\n                    analyticName: \"starts\",\n                    profileId: \"\".concat(pseudoProxy.player2_profileId),\n                    uniqueKey: \"\".concat(pseudoProxy.player2_profileId),\n                },\n            ],\n        });\n    }\n};\ngameManager.prototype.endGame = function () {\n    var _a;\n    if (pseudoProxy.isEndGameRunning)\n        return;\n    pseudoProxy.isEndGameRunning = true;\n    pseudoProxy.isGameInProress = false;\n    pseudoProxy.endGameTimer = 5;\n    spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'timer', { text: \"Time Remaining: 0\" });\n    var text = 'Good game!';\n    var winnerId;\n    var player1 = playerManager.getPlayerDetails({ _rs: _rs, _rsId: _rsId, as: false }, pseudoProxy.player1_id);\n    var p1profileId = player1.profileId;\n    var dataObject = integrationsManager.getDataObject({ _rs: _rs, _rsId: _rsId, as: false }, {\n        interactivePublicKey: pseudoProxy.interactivePublicKey,\n        scope: 'WORLD',\n    });\n    if (!dataObject.profiles) {\n        dataObject = {\n            profiles: (_a = {},\n                _a[p1profileId] = {\n                    highScore: pseudoProxy.player1_score,\n                    username: player1.nameplate || player1.username,\n                },\n                _a),\n        };\n    }\n    else if (!dataObject.profiles[p1profileId] ||\n        dataObject.profiles[p1profileId].highScore < pseudoProxy.player1_score) {\n        dataObject.profiles[p1profileId] = {\n            highScore: pseudoProxy.player1_score,\n            username: player1.nameplate || player1.username,\n        };\n    }\n    if (pseudoProxy.player2_id) {\n        var player2 = playerManager.getPlayerDetails({ _rs: _rs, _rsId: _rsId, as: false }, pseudoProxy.player2_id);\n        var p2profileId = player2.profileId;\n        if (!dataObject.profiles[p2profileId] ||\n            dataObject.profiles[p2profileId].highScore < pseudoProxy.player2_score) {\n            dataObject.profiles[p2profileId] = {\n                highScore: pseudoProxy.player2_score,\n                username: player2.nameplate || player2.username,\n            };\n        }\n        if (pseudoProxy.player2_score == pseudoProxy.player1_score) {\n            text = \"It's a tie!\";\n        }\n        else if (pseudoProxy.player2_score > pseudoProxy.player1_score) {\n            winnerId = pseudoProxy.player2_id;\n        }\n        else {\n            winnerId = pseudoProxy.player1_id;\n        }\n        if (winnerId) {\n            text = \"\".concat(playerManager.getPlayerDetails({ _rs: _rs, _rsId: _rsId, as: false }, winnerId).nameplate, \" wins!\");\n            integrationsManager.triggerParticleEffect({ _rs: _rs, _rsId: _rsId, as: false }, {\n                interactivePublicKey: pseudoProxy.interactivePublicKey,\n                duration: 4,\n                playerId: winnerId,\n                followPlayerId: winnerId,\n                particleId: stateManager.getVariable('particleId'),\n            });\n        }\n        integrationsManager.putPublicKeyAnalytics({ _rs: _rs, _rsId: _rsId, as: false }, {\n            interactivePublicKey: pseudoProxy.interactivePublicKey,\n            analytics: [\n                {\n                    analyticName: \"completions\",\n                    profileId: \"\".concat(pseudoProxy.player2_profileId),\n                    uniqueKey: \"\".concat(pseudoProxy.player2_profileId),\n                },\n                {\n                    analyticName: \"scoreOf\".concat(pseudoProxy.player2_score),\n                },\n            ],\n        });\n    }\n    spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'gameText', { text: text });\n    integrationsManager.putPublicKeyAnalytics({ _rs: _rs, _rsId: _rsId, as: false }, {\n        interactivePublicKey: pseudoProxy.interactivePublicKey,\n        analytics: [\n            {\n                analyticName: \"completions\",\n                profileId: \"\".concat(pseudoProxy.player1_profileId),\n                uniqueKey: \"\".concat(pseudoProxy.player1_profileId),\n            },\n            { analyticName: \"scoreOf\".concat(pseudoProxy.player1_score) },\n        ],\n    });\n    integrationsManager.updateDataObject({ _rs: _rs, _rsId: _rsId, as: false }, {\n        interactivePublicKey: pseudoProxy.interactivePublicKey,\n        scope: 'WORLD',\n        payload: dataObject,\n    });\n    pseudoProxy.isNextGamePreped = false;\n    pseudoProxy.isEndGameRunning = false;\n};\ngameManager.prototype.prepForNextGame = function () {\n    var _a;\n    // 5 seconds before next game counter starts or when 2nd player joins\n    if (pseudoProxy.player2_id) {\n        spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'player2_name', {\n            text: ' ',\n        });\n    }\n    var playerQueue = stateManager.getVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'playerQueue');\n    if (playerQueue.length > 0) {\n        var playerIds_1 = playerManager.getPlayerIds({ _rs: _rs, _rsId: _rsId, as: false });\n        playerQueue.forEach(function (id, index) {\n            if (playerIds_1.indexOf(id) === -1) {\n                playerQueue.splice(index, 1);\n            }\n        });\n        pseudoProxy.player2_id = playerQueue[0];\n        pseudoProxy.player2_profileId = (_a = playerManager.getPlayerDetails({ _rs: _rs, _rsId: _rsId, as: false }, playerQueue[0])) === null || _a === void 0 ? void 0 : _a.profileId;\n        spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'player2_name', {\n            text: \"\".concat(playerManager.getPlayerDetails(pseudoProxy.player2_id).nameplate),\n        });\n    }\n    if (playerQueue.length > 1) {\n        pseudoProxy.removeFromQueue({ _rs: _rs, _rsId: _rsId, as: true }, {\n            playerId: playerQueue[0],\n            shouldMoveToBottom: true,\n        });\n    }\n    spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'gameText', {\n        text: ' ',\n    });\n    spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'player1_score', {\n        text: \"Score: 0\",\n    });\n    if (pseudoProxy.player2_id) {\n        spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'player2_score', {\n            text: \"Score: 0\",\n        });\n    }\n    stateManager.setVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'gameTimer', 5);\n    pseudoProxy.endGameTimer = 0;\n    pseudoProxy.nextGameTimer = 5;\n    pseudoProxy.isNextGamePreped = true;\n};\ngameManager.prototype.resetGame = function () {\n    pseudoProxy.player1_score = 0;\n    pseudoProxy.player2_score = 0;\n    pseudoProxy.isGameInProress = false;\n    pseudoProxy.player1_occupiedPositions = {\n        1: false,\n        2: false,\n        3: false,\n        4: false,\n        5: false,\n        6: false,\n        7: false,\n        8: false,\n        9: false,\n    };\n    pseudoProxy.player2_occupiedPositions = {\n        1: false,\n        2: false,\n        3: false,\n        4: false,\n        5: false,\n        6: false,\n        7: false,\n        8: false,\n        9: false,\n    };\n};\ngameManager.prototype.addItem = function (_a) {\n    var isPlayer1 = _a.isPlayer1, playerId = _a.playerId, lastItemIsBad = _a.lastItemIsBad;\n    var gameTimer = stateManager.getVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'gameTimer');\n    if (!pseudoProxy.isGameInProress || gameTimer === 0)\n        return;\n    var occupiedPositions = isPlayer1\n        ? pseudoProxy.player1_occupiedPositions.toObject({ _rs: _rs, _rsId: _rsId, as: false })\n        : pseudoProxy.player2_occupiedPositions.toObject({ _rs: _rs, _rsId: _rsId, as: false });\n    var count = 0;\n    for (var key in occupiedPositions) {\n        if (occupiedPositions[key] === true)\n            count = count + 1;\n    }\n    if (count > 3)\n        return;\n    var spriteId = mathRandomInt({ _rs: _rs, _rsId: _rsId, as: false }, 1, lastItemIsBad ? 8 : 12);\n    var uniqueId = getRandomUUID({ _rs: _rs, _rsId: _rsId, as: false });\n    var _b = scriptManager\n        .getSystem({ systemName: 'utils_getPosition' })\n        .getPosition({ _rs: _rs, _rsId: _rsId, as: false }, { isPlayer1: isPlayer1, occupiedPositions: occupiedPositions }), position = _b.position, x = _b.x, y = _b.y;\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, \"\".concat(pseudoProxy.theme).concat(spriteId), {\n        uniqueId: uniqueId,\n        applyPhysics: true,\n        isInteractive: true,\n        positionX: x,\n        positionY: y,\n    });\n    scriptManager.attachComponent({ _rs: _rs, _rsId: _rsId, as: false }, {\n        objectUniqueId: uniqueId,\n        componentName: 'itemManager',\n        scriptId: 'itemManager',\n    });\n    var item = scriptManager.getComponent({ _rs: _rs, _rsId: _rsId, as: false }, {\n        objectUniqueId: uniqueId,\n        componentName: 'itemManager',\n    });\n    item.playerId = playerId;\n    item.itemPosition = position;\n    item.isBad = spriteId > 8 ? true : false;\n    item.isPlayer1 = isPlayer1;\n    occupiedPositions[position] = true;\n    if (isPlayer1) {\n        pseudoProxy.player1_occupiedPositions = occupiedPositions;\n        // this.player1_occupiedPositions[position] = true;\n    }\n    else {\n        pseudoProxy.player2_occupiedPositions = occupiedPositions;\n        // this.player2_occupiedPositions[position] = true;\n    }\n};\ngameManager.prototype.removeItem = function (_a) {\n    var itemId = _a.itemId, itemPosition = _a.itemPosition, isPlayer1 = _a.isPlayer1, playerId = _a.playerId;\n    spriteManager.removeSprite({ _rs: _rs, _rsId: _rsId, as: false }, itemId);\n    var occupiedPositions = isPlayer1\n        ? pseudoProxy.player1_occupiedPositions.toObject({ _rs: _rs, _rsId: _rsId, as: false })\n        : pseudoProxy.player2_occupiedPositions.toObject({ _rs: _rs, _rsId: _rsId, as: false });\n    occupiedPositions[itemPosition] = false;\n    if (isPlayer1) {\n        pseudoProxy.player1_occupiedPositions = occupiedPositions;\n        // this.player1_occupiedPositions[itemPosition] = false;\n    }\n    else {\n        pseudoProxy.player2_occupiedPositions = occupiedPositions;\n        // this.player2_occupiedPositions[itemPosition] = false;\n    }\n    var count = 0;\n    for (var key in occupiedPositions) {\n        if (occupiedPositions[key] === true)\n            count = count + 1;\n    }\n    if (count === 0)\n        pseudoProxy.addItem({ _rs: _rs, _rsId: _rsId, as: true }, { isPlayer1: isPlayer1, playerId: playerId });\n};\ngameManager.prototype.itemClicked = function (_a) {\n    var itemId = _a.itemId, isBad = _a.isBad, isPlayer1 = _a.isPlayer1, playerId = _a.playerId, itemPosition = _a.itemPosition;\n    if (isPlayer1) {\n        if (isBad)\n            pseudoProxy.player1_score = pseudoProxy.player1_score - 1;\n        else\n            pseudoProxy.player1_score++;\n        spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'player1_score', {\n            text: \"Score: \".concat(pseudoProxy.player1_score),\n        });\n    }\n    else {\n        if (isBad)\n            pseudoProxy.player2_score = pseudoProxy.player2_score - 1;\n        else\n            pseudoProxy.player2_score++;\n        spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'player2_score', {\n            text: \"Score: \".concat(pseudoProxy.player2_score),\n        });\n    }\n    pseudoProxy.removeItem({ _rs: _rs, _rsId: _rsId, as: true }, { itemId: itemId, itemPosition: itemPosition, isPlayer1: isPlayer1, playerId: playerId });\n    pseudoProxy.addItem({ _rs: _rs, _rsId: _rsId, as: true }, { isPlayer1: isPlayer1, playerId: playerId, lastItemIsBad: isBad });\n};\n"},{"gameId":"iyIxxiVJASPqGIHVbt6i","methodSignatures":[{"parameters":[],"methodName":"onClicked","returnType":"void"},{"parameters":[],"methodName":"onStep","returnType":"void"}],"scriptType":"component","scriptName":"itemManager","className":"itemManager","contentUpdatedAtISO":"2025-03-31T21:31:50.183Z","includedAPIs":["spriteManager","eventManager","playerManager","stateManager"],"gameScriptId":"itemManager","propertySignatures":[{"propertyName":"itemTimer","type":"number"},{"propertyName":"itemId","type":"string"},{"propertyName":"itemPosition","type":"number"},{"propertyName":"playerId","type":"number"},{"propertyName":"isBad","type":"boolean"},{"propertyName":"isPlayer1","type":"boolean"}],"scriptFormat":"ts","createdISO":"2025-05-23T16:26:05.252Z","typescriptString":"class itemManager extends ComponentScript {\n  itemTimer: number;\n  itemId: string;\n  itemPosition: number;\n  playerId: number;\n  isBad: boolean;\n  isPlayer1: boolean;\n\n  constructor(props) {\n    if (!playerManager.isHost && props.isHydration) return;\n    this.itemTimer = 0;\n  }\n\n  onClicked() {\n    const item = scriptManager.getComponent({\n      objectUniqueId: this.sprite.uniqueId,\n      componentName: 'itemManager',\n    });\n    const { itemPosition, isBad, isPlayer1, playerId } = item;\n\n    if (playerId !== playerManager.getMyPlayerId()) return;\n\n    this.itemTimer = 0;\n\n    eventManager.emit('itemClicked', {\n      isBad,\n      isPlayer1,\n      itemId: this.sprite.uniqueId,\n      itemPosition,\n      playerId,\n    });\n  }\n\n  onStep() {\n    let itemTimer = this.itemTimer;\n    if (!itemTimer || itemTimer < 0) itemTimer = 0;\n\n    const gameTimer = stateManager.getVariable('gameTimer');\n\n    const item = scriptManager.getComponent({\n      objectUniqueId: this.sprite.uniqueId,\n      componentName: 'itemManager',\n    });\n    const { itemPosition, isBad, isPlayer1, playerId } = item;\n\n    let shouldAdd = false;\n    let shouldRemove = false;\n\n    if (gameTimer <= 0) {\n      shouldRemove = true;\n    } else if (isBad && itemTimer === 1) {\n      shouldAdd = true;\n    } else if (isBad && itemTimer === 2) {\n      shouldRemove = true;\n    } else if (gameTimer < 20) {\n      if (itemTimer === 2) shouldAdd = true;\n      else if (itemTimer >= 3) shouldRemove = true;\n    } else {\n      if (itemTimer === 3) shouldAdd = true;\n      else if (itemTimer >= 4) shouldRemove = true;\n    }\n\n    if (shouldAdd) {\n      eventManager.emit('addItem', {\n        isPlayer1,\n        playerId,\n        lastItemIsBad: isBad,\n      });\n    }\n\n    if (shouldRemove) {\n      eventManager.emit('removeItem', {\n        itemId: this.sprite.uniqueId,\n        itemPosition,\n        isPlayer1,\n        playerId,\n      });\n      return;\n    }\n\n    this.itemTimer = itemTimer + 1;\n  }\n}","javascriptString":"\"use strict\";\nvar pseudoProxy = scriptManager._getPsuedoProxy({ scriptInstanceId: scriptInstanceId });\nfunction itemManager(props) {\n    if (!playerManager.isHost && props.isHydration)\n        return;\n    pseudoProxy.itemTimer = 0;\n}\nitemManager.prototype.onClicked = function () {\n    var item = scriptManager.getComponent({ _rs: _rs, _rsId: _rsId, as: false }, {\n        objectUniqueId: pseudoProxy.sprite.uniqueId,\n        componentName: 'itemManager',\n    });\n    var itemPosition = item.itemPosition, isBad = item.isBad, isPlayer1 = item.isPlayer1, playerId = item.playerId;\n    if (playerId !== playerManager.getMyPlayerId({ _rs: _rs, _rsId: _rsId, as: false }))\n        return;\n    pseudoProxy.itemTimer = 0;\n    eventManager.emit({ _rs: _rs, _rsId: _rsId, as: false }, 'itemClicked', {\n        isBad: isBad,\n        isPlayer1: isPlayer1,\n        itemId: pseudoProxy.sprite.uniqueId,\n        itemPosition: itemPosition,\n        playerId: playerId,\n    });\n};\nitemManager.prototype.onStep = function () {\n    var itemTimer = pseudoProxy.itemTimer;\n    if (!itemTimer || itemTimer < 0)\n        itemTimer = 0;\n    var gameTimer = stateManager.getVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'gameTimer');\n    var item = scriptManager.getComponent({ _rs: _rs, _rsId: _rsId, as: false }, {\n        objectUniqueId: pseudoProxy.sprite.uniqueId,\n        componentName: 'itemManager',\n    });\n    var itemPosition = item.itemPosition, isBad = item.isBad, isPlayer1 = item.isPlayer1, playerId = item.playerId;\n    var shouldAdd = false;\n    var shouldRemove = false;\n    if (gameTimer <= 0) {\n        shouldRemove = true;\n    }\n    else if (isBad && itemTimer === 1) {\n        shouldAdd = true;\n    }\n    else if (isBad && itemTimer === 2) {\n        shouldRemove = true;\n    }\n    else if (gameTimer < 20) {\n        if (itemTimer === 2)\n            shouldAdd = true;\n        else if (itemTimer >= 3)\n            shouldRemove = true;\n    }\n    else {\n        if (itemTimer === 3)\n            shouldAdd = true;\n        else if (itemTimer >= 4)\n            shouldRemove = true;\n    }\n    if (shouldAdd) {\n        eventManager.emit({ _rs: _rs, _rsId: _rsId, as: false }, 'addItem', {\n            isPlayer1: isPlayer1,\n            playerId: playerId,\n            lastItemIsBad: isBad,\n        });\n    }\n    if (shouldRemove) {\n        eventManager.emit({ _rs: _rs, _rsId: _rsId, as: false }, 'removeItem', {\n            itemId: pseudoProxy.sprite.uniqueId,\n            itemPosition: itemPosition,\n            isPlayer1: isPlayer1,\n            playerId: playerId,\n        });\n        return;\n    }\n    pseudoProxy.itemTimer = itemTimer + 1;\n};\n"},{"gameId":"iyIxxiVJASPqGIHVbt6i","scriptType":"system","scriptName":"main","gameScriptId":"main","propertySignatures":[],"scriptFormat":"ts","uniqueId":"main","methodSignatures":[{"parameters":[],"methodName":"onHostStart","returnType":"void"},{"methodName":"onVariableChanged_playerQueue","parameters":[{"label":"__0","type":"{ newValue: any; }"}],"returnType":"void"},{"methodName":"onEvent_itemClicked","parameters":[{"label":"__0","type":"{ itemId: string; isBad: boolean; isPlayer1: boolean; playerId: number; itemPosition: number; }"}],"returnType":"void"},{"methodName":"onEvent_addItem","parameters":[{"label":"__0","type":"{ isPlayer1: boolean; playerId: number; lastItemIsBad: boolean; }"}],"returnType":"void"},{"methodName":"onEvent_removeItem","parameters":[{"label":"__0","type":"{ itemId: string; itemPosition: number; isPlayer1: boolean; playerId: number; }"}],"returnType":"void"}],"className":"main","includedAPIs":["spriteManager","eventManager","stateManager","playerManager","gameStateManager"],"contentUpdatedAtISO":"2025-05-16T18:35:06.335Z","createdISO":"2025-05-23T16:26:05.254Z","typescriptString":"class main extends SystemScript {\n  onHostStart() {\n    stateManager.setVariable('playerQueue', []);\n    stateManager.setVariable('gameTimer', 10);\n\n    scriptManager.attachSystem({ scriptId: 'gameManager' });\n\n    stageManager.setCurrentStage('sushi');\n\n    spriteManager.addSprite('sushiLayer1', {\n      uniqueId: 'sushiLayer1',\n      positionX: 0,\n      positionY: 0,\n      height: 800,\n      width: 1200\n      // checkCollisions: true,\n    });\n    // scriptManager.attachComponent({\n    //   objectUniqueId: 'sushiLayer1',\n    //   componentName: 'boardManager',\n    //   scriptId: 'boardManager',\n    // });\n\n    spriteManager.addSprite('text', {\n      uniqueId: 'gameText',\n      text: ' ',\n      fontSize: 28,\n      positionX: 500,\n      positionY: 250,\n    });\n\n    spriteManager.addSprite('text', {\n      uniqueId: 'queue',\n      text: ' ',\n      width: 100,\n      positionX: 760,\n      positionY: 25,\n      isInteractive: true,\n    });\n\n    spriteManager.addSprite('text', {\n      uniqueId: 'timer',\n      text: 'Waiting for other players to join',\n      positionX: 500,\n      positionY: 210,\n    });\n    spriteManager.updateSprite('timer', {\n      text: 'Waiting for other players to join',\n    });\n\n    spriteManager.addSprite('text', {\n      uniqueId: 'playerPositionInQueue',\n      text: ' ',\n      width: 100,\n      positionX: 760,\n      positionY: 70,\n      isPlayerControlled: true,\n    });\n\n    spriteManager.addSprite('text', {\n      uniqueId: 'player1_name',\n      text: `${\n        playerManager.getPlayerDetails(playerManager.getMyPlayerId()).nameplate\n      }`,\n      positionX: 300,\n      positionY: 650,\n    });\n    spriteManager.updateSprite('player1_name', {\n      text: `${\n        playerManager.getPlayerDetails(playerManager.getMyPlayerId()).nameplate\n      }`,\n    });\n\n    spriteManager.addSprite('text', {\n      uniqueId: 'player1_score',\n      text: 'Score: 0',\n      positionX: 300,\n      positionY: 300,\n    });\n\n    spriteManager.addSprite('text', {\n      uniqueId: 'player2_name',\n      text: ' ',\n      positionX: 800,\n      positionY: 650,\n    });\n\n    spriteManager.addSprite('text', {\n      uniqueId: 'player2_score',\n      text: ' ',\n      positionX: 800,\n      positionY: 300,\n    });\n  }\n\n  onVariableChanged_playerQueue({ newValue }) {\n    let text = ' ';\n    if (newValue.length > 0 && newValue[0]) {\n      text = `Next up: ${playerManager.getPlayerDetails(newValue[0]).nameplate}`;\n    }\n    spriteManager.updateSprite('queue', { text });\n\n    const spot = (newValue as Array<number>).indexOf(playerManager.getMyPlayerId());\n    if (spot > 0) {\n      spriteManager.updateSprite('playerPositionInQueue', {\n        text: `Position in queue: ${spot}`,\n      });\n    } else {\n      spriteManager.updateSprite('playerPositionInQueue', {\n        text: ' ',\n      });\n    }\n  }\n\n  // *** Event Handlers\n\n  onEvent_itemClicked({\n    itemId,\n    isBad,\n    isPlayer1,\n    playerId,\n    itemPosition,\n  }: {\n    itemId: string;\n    isBad: boolean;\n    isPlayer1: boolean;\n    playerId: number;\n    itemPosition: number;\n  }) {\n    if (!playerManager.isHost) return;\n\n    scriptManager\n      .getSystem({\n        systemName: 'gameManager',\n      })\n      .itemClicked({\n        itemId,\n        isBad,\n        isPlayer1,\n        playerId,\n        itemPosition,\n      });\n  }\n\n  onEvent_addItem({\n    isPlayer1,\n    playerId,\n    lastItemIsBad,\n  }: {\n    isPlayer1: boolean;\n    playerId: number;\n    lastItemIsBad: boolean;\n  }) {\n    if (!playerManager.isHost) return;\n\n    scriptManager\n      .getSystem({\n        systemName: 'gameManager',\n      })\n      .addItem({ isPlayer1, playerId, lastItemIsBad });\n  }\n\n  onEvent_removeItem({\n    itemId,\n    itemPosition,\n    isPlayer1,\n    playerId,\n  }: {\n    itemId: string;\n    itemPosition: number;\n    isPlayer1: boolean;\n    playerId: number;\n  }) {\n    if (!playerManager.isHost) return;\n\n    scriptManager\n      .getSystem({\n        systemName: 'gameManager',\n      })\n      .removeItem({ itemId, itemPosition, isPlayer1, playerId });\n  }\n}","javascriptString":"\"use strict\";\nvar pseudoProxy = scriptManager._getPsuedoProxy({ scriptInstanceId: scriptInstanceId });\nfunction main() {\n}\nmain.prototype.onHostStart = function () {\n    stateManager.setVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'playerQueue', []);\n    stateManager.setVariable({ _rs: _rs, _rsId: _rsId, as: false }, 'gameTimer', 10);\n    scriptManager.attachSystem({ scriptId: 'gameManager' });\n    stageManager.setCurrentStage({ _rs: _rs, _rsId: _rsId, as: false }, 'sushi');\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'sushiLayer1', {\n        uniqueId: 'sushiLayer1',\n        positionX: 0,\n        positionY: 0,\n        height: 800,\n        width: 1200\n        // checkCollisions: true,\n    });\n    // scriptManager.attachComponent({\n    //   objectUniqueId: 'sushiLayer1',\n    //   componentName: 'boardManager',\n    //   scriptId: 'boardManager',\n    // });\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'text', {\n        uniqueId: 'gameText',\n        text: ' ',\n        fontSize: 28,\n        positionX: 500,\n        positionY: 250,\n    });\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'text', {\n        uniqueId: 'queue',\n        text: ' ',\n        width: 100,\n        positionX: 760,\n        positionY: 25,\n        isInteractive: true,\n    });\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'text', {\n        uniqueId: 'timer',\n        text: 'Waiting for other players to join',\n        positionX: 500,\n        positionY: 210,\n    });\n    spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'timer', {\n        text: 'Waiting for other players to join',\n    });\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'text', {\n        uniqueId: 'playerPositionInQueue',\n        text: ' ',\n        width: 100,\n        positionX: 760,\n        positionY: 70,\n        isPlayerControlled: true,\n    });\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'text', {\n        uniqueId: 'player1_name',\n        text: \"\".concat(playerManager.getPlayerDetails(playerManager.getMyPlayerId()).nameplate),\n        positionX: 300,\n        positionY: 650,\n    });\n    spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'player1_name', {\n        text: \"\".concat(playerManager.getPlayerDetails(playerManager.getMyPlayerId()).nameplate),\n    });\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'text', {\n        uniqueId: 'player1_score',\n        text: 'Score: 0',\n        positionX: 300,\n        positionY: 300,\n    });\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'text', {\n        uniqueId: 'player2_name',\n        text: ' ',\n        positionX: 800,\n        positionY: 650,\n    });\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'text', {\n        uniqueId: 'player2_score',\n        text: ' ',\n        positionX: 800,\n        positionY: 300,\n    });\n};\nmain.prototype.onVariableChanged_playerQueue = function (_a) {\n    var newValue = _a.newValue;\n    var text = ' ';\n    if (newValue.length > 0 && newValue[0]) {\n        text = \"Next up: \".concat(playerManager.getPlayerDetails({ _rs: _rs, _rsId: _rsId, as: false }, newValue[0]).nameplate);\n    }\n    spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'queue', { text: text });\n    var spot = newValue.indexOf({ _rs: _rs, _rsId: _rsId, as: false }, playerManager.getMyPlayerId());\n    if (spot > 0) {\n        spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'playerPositionInQueue', {\n            text: \"Position in queue: \".concat(spot),\n        });\n    }\n    else {\n        spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'playerPositionInQueue', {\n            text: ' ',\n        });\n    }\n};\nmain.prototype.onEvent_itemClicked = function (_a) {\n    var itemId = _a.itemId, isBad = _a.isBad, isPlayer1 = _a.isPlayer1, playerId = _a.playerId, itemPosition = _a.itemPosition;\n    if (!playerManager.isHost)\n        return;\n    scriptManager\n        .getSystem({\n        systemName: 'gameManager',\n    })\n        .itemClicked({ _rs: _rs, _rsId: _rsId, as: false }, {\n        itemId: itemId,\n        isBad: isBad,\n        isPlayer1: isPlayer1,\n        playerId: playerId,\n        itemPosition: itemPosition,\n    });\n};\nmain.prototype.onEvent_addItem = function (_a) {\n    var isPlayer1 = _a.isPlayer1, playerId = _a.playerId, lastItemIsBad = _a.lastItemIsBad;\n    if (!playerManager.isHost)\n        return;\n    scriptManager\n        .getSystem({\n        systemName: 'gameManager',\n    })\n        .addItem({ _rs: _rs, _rsId: _rsId, as: false }, { isPlayer1: isPlayer1, playerId: playerId, lastItemIsBad: lastItemIsBad });\n};\nmain.prototype.onEvent_removeItem = function (_a) {\n    var itemId = _a.itemId, itemPosition = _a.itemPosition, isPlayer1 = _a.isPlayer1, playerId = _a.playerId;\n    if (!playerManager.isHost)\n        return;\n    scriptManager\n        .getSystem({\n        systemName: 'gameManager',\n    })\n        .removeItem({ _rs: _rs, _rsId: _rsId, as: false }, { itemId: itemId, itemPosition: itemPosition, isPlayer1: isPlayer1, playerId: playerId });\n};\n"},{"gameId":"iyIxxiVJASPqGIHVbt6i","methodSignatures":[{"isAsync":true,"methodName":"getPosition","parameters":[{"label":"__0","type":"{ isPlayer1: boolean; occupiedPositions: Record<string, boolean>; }"}],"returnType":"Promise<{ position: any; x: any; y: any; }>"}],"scriptType":"system","scriptName":"utils_getPosition","className":"utils_getPosition","contentUpdatedAtISO":"2025-03-31T21:31:50.198Z","includedAPIs":[],"gameScriptId":"utils_getPosition","propertySignatures":[],"scriptFormat":"ts","createdISO":"2025-05-23T16:26:05.257Z","typescriptString":"class utils_getPosition extends SystemScript {\n  async getPosition({\n    isPlayer1,\n    occupiedPositions = {},\n  }: {\n    isPlayer1: boolean;\n    occupiedPositions: Record<string, boolean>;\n  }) {\n    const col1 = 200;\n    const col2 = 310;\n    const col3 = 420;\n    const col4 = 670;\n    const col5 = 780;\n    const col6 = 890;\n    const row1 = 335;\n    const row2 = 435;\n    const row3 = 535;\n\n    let positions;\n    if (isPlayer1) {\n      positions = {\n        1: { x: col1, y: row1 },\n        2: { x: col2, y: row1 },\n        3: { x: col3, y: row1 },\n        4: { x: col1, y: row2 },\n        5: { x: col2, y: row2 },\n        6: { x: col3, y: row2 },\n        7: { x: col1, y: row3 },\n        8: { x: col2, y: row3 },\n        9: { x: col3, y: row3 },\n      };\n    } else {\n      positions = {\n        1: { x: col4, y: row1 },\n        2: { x: col5, y: row1 },\n        3: { x: col6, y: row1 },\n        4: { x: col4, y: row2 },\n        5: { x: col5, y: row2 },\n        6: { x: col6, y: row2 },\n        7: { x: col4, y: row3 },\n        8: { x: col5, y: row3 },\n        9: { x: col6, y: row3 },\n      };\n    }\n\n    let position;\n    do {\n      position = mathRandomInt(1, 9);\n    } while (occupiedPositions[position]);\n    \n    return { position, x: positions[position].x, y: positions[position].y };\n  }\n}","javascriptString":"\"use strict\";\nvar pseudoProxy = scriptManager._getPsuedoProxy({ scriptInstanceId: scriptInstanceId });\nfunction utils_getPosition() {\n}\nutils_getPosition.prototype.getPosition = function (_a) {\n    var isPlayer1 = _a.isPlayer1, _b = _a.occupiedPositions, occupiedPositions = _b === void 0 ? {} : _b;\n    var col1 = 200;\n    var col2 = 310;\n    var col3 = 420;\n    var col4 = 670;\n    var col5 = 780;\n    var col6 = 890;\n    var row1 = 335;\n    var row2 = 435;\n    var row3 = 535;\n    var positions;\n    if (isPlayer1) {\n        positions = {\n            1: { x: col1, y: row1 },\n            2: { x: col2, y: row1 },\n            3: { x: col3, y: row1 },\n            4: { x: col1, y: row2 },\n            5: { x: col2, y: row2 },\n            6: { x: col3, y: row2 },\n            7: { x: col1, y: row3 },\n            8: { x: col2, y: row3 },\n            9: { x: col3, y: row3 },\n        };\n    }\n    else {\n        positions = {\n            1: { x: col4, y: row1 },\n            2: { x: col5, y: row1 },\n            3: { x: col6, y: row1 },\n            4: { x: col4, y: row2 },\n            5: { x: col5, y: row2 },\n            6: { x: col6, y: row2 },\n            7: { x: col4, y: row3 },\n            8: { x: col5, y: row3 },\n            9: { x: col6, y: row3 },\n        };\n    }\n    var position;\n    do {\n        position = mathRandomInt({ _rs: _rs, _rsId: _rsId, as: false }, 1, 9);\n    } while (occupiedPositions[position]);\n    return { position: position, x: positions[position].x, y: positions[position].y };\n};\n"},{"gameId":"iyIxxiVJASPqGIHVbt6i","methodSignatures":[{"methodName":"addPlayerText","parameters":[{"label":"__0","type":"{ isPlayer1: boolean; playerId: number; }"}],"returnType":"void"},{"methodName":"removePlayerText","parameters":[{"label":"__0","type":"{ playerId: number; }"}],"returnType":"void"},{"methodName":"updateScore","parameters":[{"label":"__0","type":"{ playerId: number; score: number; }"}],"returnType":"void"}],"scriptType":"system","scriptName":"utils_text","className":"utils_text","contentUpdatedAtISO":"2025-04-10T16:57:53.915Z","includedAPIs":[],"gameScriptId":"utils_text","propertySignatures":[],"scriptFormat":"ts","createdISO":"2025-05-23T16:26:05.259Z","typescriptString":"class utils_text extends SystemScript {\n  addPlayerText({\n    isPlayer1,\n    playerId,\n  }: {\n    isPlayer1: boolean;\n    playerId: number;\n  }) {\n    console.log(\"utils_text playerId\",playerId)\n    console.log(\"utils_text playerManager.getPlayerDetails(playerId)\",playerManager.getPlayerDetails(playerId))\n    spriteManager.addSprite('text', {\n      uniqueId: `${playerId}_name`,\n      text: playerManager.getPlayerDetails(playerId).nameplate,\n      positionX: isPlayer1 ? 300 : 800,\n      positionY: 650,\n    });\n\n    spriteManager.addSprite('text', {\n      uniqueId: `${playerId}_score`,\n      text: 'Score: 0',\n      positionX: isPlayer1 ? 300 : 800,\n      positionY: 300,\n    });\n  }\n\n  removePlayerText({ playerId }: { playerId: number }) {\n    spriteManager.removeSprite(`${playerId}_name`);\n    spriteManager.removeSprite(`${playerId}_score`);\n  }\n\n  updateScore({ playerId, score }: { playerId: number; score: number }) {\n    spriteManager.updateSprite(`${playerId}_score`, {\n      text: `Score: ${score}`,\n    });\n  }\n}","javascriptString":"\"use strict\";\nvar pseudoProxy = scriptManager._getPsuedoProxy({ scriptInstanceId: scriptInstanceId });\nfunction utils_text() {\n}\nutils_text.prototype.addPlayerText = function (_a) {\n    var isPlayer1 = _a.isPlayer1, playerId = _a.playerId;\n    console.log({ _rs: _rs, _rsId: _rsId, as: false }, \"utils_text playerId\", playerId);\n    console.log({ _rs: _rs, _rsId: _rsId, as: false }, \"utils_text playerManager.getPlayerDetails(playerId)\", playerManager.getPlayerDetails(playerId));\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'text', {\n        uniqueId: \"\".concat(playerId, \"_name\"),\n        text: playerManager.getPlayerDetails(playerId).nameplate,\n        positionX: isPlayer1 ? 300 : 800,\n        positionY: 650,\n    });\n    spriteManager.addSprite({ _rs: _rs, _rsId: _rsId, as: false }, 'text', {\n        uniqueId: \"\".concat(playerId, \"_score\"),\n        text: 'Score: 0',\n        positionX: isPlayer1 ? 300 : 800,\n        positionY: 300,\n    });\n};\nutils_text.prototype.removePlayerText = function (_a) {\n    var playerId = _a.playerId;\n    spriteManager.removeSprite({ _rs: _rs, _rsId: _rsId, as: false }, \"\".concat(playerId, \"_name\"));\n    spriteManager.removeSprite({ _rs: _rs, _rsId: _rsId, as: false }, \"\".concat(playerId, \"_score\"));\n};\nutils_text.prototype.updateScore = function (_a) {\n    var playerId = _a.playerId, score = _a.score;\n    spriteManager.updateSprite({ _rs: _rs, _rsId: _rsId, as: false }, \"\".concat(playerId, \"_score\"), {\n        text: \"Score: \".concat(score),\n    });\n};\n"}],"version":"0.0.2"}